# Cursor Rules

This file contains the contents of the system prompt used to give instructions to Cursor AI.


## Project Context

- Next.js (App Router) + TypeScript project for comparing AI agent behaviors
- Focus on frontend implementation with mock API responses
- Used for technical blog content about AI agent differences
- Simulate realistic API latency (500ms-2000ms) for better UX testing


## Important Notes

- Always confirm any unclear points before starting work
- Report and get approval for important decisions
- Immediately report unexpected issues and propose solutions
- **Do not make changes without explicit instructions** - propose changes first and get approval
- **UI/UX design changes (layout, colors, fonts, spacing) are prohibited** - must get approval with clear justification
- **Do not modify versions in tech stack (APIs, frameworks, libraries)** - must get approval with clear justification


## Implementation Process

1. Plan implementation steps
   - Analyze requirements and constraints
   - Check for existing similar implementations
   - Identify potential challenges
   - List detailed implementation steps
   - Determine optimal execution order

2. Confirm the steps with the user
   - Present the implementation plan
   - Get explicit approval for version changes
   - Clarify any uncertainties

3. Design implementation details after user approval
   - Follow directory structure rules
   - Maintain consistent naming conventions
   - Place shared logic appropriately
   - Document key decisions

4. Output the implementation
   - Follow type safety best practices
   - Include error handling
   - Add necessary comments
   - Ensure code consistency

5. Run `npm run build` to verify
   - Fix any errors according to messages
   - Re-run until successful
   - Document any recurring issues


## Version Management

- Core dependencies versions are strictly managed:
  - Next.js: 15.1.5
  - React: ^19.0.0
  - TypeScript: ^5.0.0
- Version changes require explicit user approval
- Dependencies must be compatible with core versions


## Project Structure

- app/                    # App Router pages and layouts
  ├── api/               # API endpoints
  │   └── [endpoint]/
  │       └── route.ts
  ├── components/        # Application components
  │   └── ui/           # Basic UI components
  ├── types/            # TypeScript type definitions
  └── styles/           # Global styles


## Code Style

- Prefer TypeScript best practices and type safety
- Follow Next.js App Router conventions
- Use modern ES6+ syntax
- Maintain consistent file structure


## Response Guidelines

- Suggest practical implementations for AI agent interactions
- Focus on frontend state management and UI patterns
- Provide type-safe solutions
- Include error handling and edge cases
- Consider performance implications
- Suggest testing strategies when relevant
- Always respond in Japanese


## Documentation

- Include JSDoc comments for complex functions
- Document key architectural decisions
- Explain AI-specific implementation details


## Constraints

- Keep solutions frontend-focused
- Use mock data instead of real backend
- Use Next.js v15.x for the project
- Optimize for readability and maintainability
- Minimize external dependencies
  - Core dependencies: Next.js, React, TypeScript
  - Additional libraries must be justified by specific needs
  - Prefer native solutions over third-party packages when feasible
